
var express = require('express'),
	authentication = require('express-authentication'),
	allows = require('express-allows'),
	bodyParser = require('body-parser'),
	oauth = require(__dirname + '/..');

var app = express(),
	auth = authentication();


var accounts = [
	{ id: 1, username: 'bob', password: 'test' },
	{ id: 2, username: 'sam', password: 'test' }
];

var credentials = [
	{ clientId: 'my-app-1', clientSecret: 'bar' },
	{ clientId: 'my-app-2', clientSecret: 'xyz' }
];

var tokens = [

];


function is(type) {
	return function(req, res, next) {
		if (!req.is(type)) {
			return next({ statusCode: 415 });
		} else {
			return next();
		}
	}
}

var client = oauth.auth.client(function(where, callback) {
	var res = _.find(credentials, where);
	callback(null, !!res, res);
});

app.use('/oauth/token', allows('POST'));

// Common elements.
app.post(
	'/oauth/token',

	// HTTP 415 if not urlencoded
	is('application/x-www-form-urlencoded'),

	// Get the body
	bodyParser.urlencoded({ extended: false })
);

app.post(
	'/oauth/token',
	oauth.grants('password'),
	auth.for(client).required(),
	oauth.grant.password(function (search, callback) {
		callback(null, _.find(accounts, search));
	}),
	oauth.endpoint.token()
);

app.post(
	'/oauth/token',
	oauth.grants('authorization_code'),
	auth.required(),
	oauth.grant.authorizationCode(function(search) {

	}),
	oauth.endpoint.token()
);

app.post(
	'/oauth/token',
	oauth.grants('client_credentials'),
	oauth.grant.clientCredentials(function(search) {

	}),
	oauth.endpoint.token()
);

app.post(
	'/oauth/token',
	oauth.grants('refresh_token'),
	auth.required(),
	oauth.grant.refreshToken(),
	oauth.endpoint.token()
);

app.use('/oauth/authorize', allows('GET'));

// How can we get this to work as a JSON api endpoint?
// Instead of redirecting to an html page if they are logged in or not
// can we send 401 and get the consumer to redirect instead?
// Secondarily, how do we handle the "allow app x to access your account?"
// That obviously has to be done on the oauth2 server's website so redirect
// is required there.

// To use local "Bearer" authentication this has to be a GET to load the page
// for authorization which THEN makes a POST with the local user Bearer data.

app.get('/oauth/authorize', auth.for(site).failed(), redirect('/login'));
app.get('/oauth/authorize', auth.for(site).required(), )

/**
 * @param {Object} options Authorization parameters.
 * @param {String} options.type Type of response requested
 * @param {String} options.redirect
 * @param {Array} options.scope Array of scopes requested
 */
function authorize(options, callback) {
	// client requesting
	options.clientId
	// scopes requested
	options.scope
	// for which user
	var account = auth.for(site).of(req).authentication;


	if (not redirect allowed for clientId) {
		fail() // 403
	}

	if (not type allowed for clientId) {
		fail() // 403
	}

	

	if (client authorized for all scopes of user) {
		success //200
	} else {
		// 412
		redirect()
	}
}

/*
REQUIRED. The authorization code generated by the
authorization server. The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks. A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED. The client MUST NOT use the authorization code
more than once. If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code. The authorization code is bound to
the client identifier and redirection URI.

*/

function done() {
	if (success) {
		// Generate an access token
		// Save token

		// if response_type === 'token'
		// return token
		// else if response_type === 'code'
		// generate code
		//
	}
}

/*
auth.jade -> ajax({
	method: 'POST',
	url: '/oauth/authorize',
	data: window.location.parameters,
	headers: {
		'Authorization': 'Bearer ' + session.bearer
	},
	http(5xx) -> unknown server error
	http(4xx) -> unknown client error
	http(401) -> redirect(login)
	http(20x) -> UI trigger with requested scopes
	http(200) -> redirect(response.redirect_url)
	http(_)
})
*/

app.use(function(err, req, res, next) {
	console.log(err);
	if (err.statusCode) {
		res.status(err.statusCode);
	}
	next(err);
});


app.listen(process.env.PORT || 9919);
